# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the "main" branch, `terraform apply` will be executed.
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
#
# To use this workflow, you will need to complete the following setup steps.
#
# 1. Create a `main.tf` file in the root of this repository with the `remote` backend and one or more resources defined.
#   Example `main.tf`:
#     # The configuration for the `remote` backend.
#     terraform {
#       backend "remote" {
#         # The name of your Terraform Cloud organization.
#         organization = "example-organization"
#
#         # The name of the Terraform Cloud workspace to store Terraform state files in.
#         workspaces {
#           name = "example-workspace"
#         }
#       }
#     }
#
#     # An example resource that does nothing.
#     resource "null_resource" "example" {
#       triggers = {
#         value = "A example resource that does nothing!"
#       }
#     }
#
#
# 2. Generate a Terraform Cloud user API token and store it as a GitHub secret (e.g. TF_API_TOKEN) on this repository.
#   Documentation:
#     - https://www.terraform.io/docs/cloud/users-teams-organizations/api-tokens.html
#     - https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets
#
# 3. Reference the GitHub secret in step using the `hashicorp/setup-terraform` GitHub Action.
#   Example:
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1
#       with:
#         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

name: 'Terraform'

on:
  push:
    branches: [ "main", "kubernetes-setup" ]
  pull_request:

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.6.0

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      uses: hashicorp/terraform-github-actions/init@master
      env:
        TF_ACTION_WORKING_DIR: 'kubernetes/terraform'
        
    # Checks that all Terraform configuration files adhere to a canonical format
    - name: 'Terraform FMT check'
      uses: hashicorp/terraform-github-actions@master
      with:
        tf_actions_subcommand: 'fmt -check'
        tf_actions_working_dir: 'kubernetes/terraform'
        tf_actions_comment: true

    # Generates an execution plan for Terraform
    - name: 'Terraform Plan'
      uses: hashicorp/terraform-github-actions@master
      with:
        tf_actions_subcommand: 'plan -input=false'
        tf_actions_working_dir: 'kubernetes/terraform'
        tf_actions_comment: true
        
      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/"main"' && github.event_name == 'push'
      uses: hashicorp/terraform-github-actions@master
      with:
        tf_actions_subcommand: 'apply -auto-approve -input=false'
        tf_actions_working_dir: 'kubernetes/terraform'
        tf_actions_comment: true
      env:
        TF_VAR_template_vm_id: ${{ secrets.TF_VAR_template_vm_id }}
        TF_VAR_number_of_control_planes: ${{ secrets.TF_VAR_number_of_control_planes }}
        TF_VAR_number_of_large_workers: ${{ secrets.TF_VAR_number_of_large_workers }}
        TF_VAR_number_of_medium_workers: ${{ secrets.TF_VAR_number_of_medium_workers }}
        TF_VAR_number_of_small_workers: ${{ secrets.TF_VAR_number_of_small_workers }}
        
        TF_VAR_node_name: ${{ secrets.TF_VAR_node_name }}
        TF_VAR_vlan_id: ${{ secrets.TF_VAR_vlan_id }}
        
        TF_VAR_provider_endpoint: ${{ secrets.TF_VAR_provider_endpoint }}
        TF_VAR_provider_username: ${{ secrets.TF_VAR_provider_username }}
        TF_VAR_provider_password: ${{ secrets.TF_VAR_provider_password }}
        
        TF_VAR_vm_password: ${{ secrets.TF_VAR_vm_password }}
        TF_VAR_vm_username: ${{ secrets.TF_VAR_vm_username }}
        TF_VAR_vm_public_key: ${{ secrets.TF_VAR_vm_public_key }}

